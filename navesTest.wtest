import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveLlena.carga())
		assert.that(naveLlena.excedidaDeVelocidad())
	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
		assert.that(naveSinPasajeros.estaEnPeligro())
	}

}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "esta invisible en reposo" {
		assert.that(naveEnReposo.estaInvisible())
	  
	}

	test "no esta invisible en reposo" {
		const naveEnReposoVelocidad_3000 = new NaveDeCombate(velocidad = 30000)
		assert.notThat(naveEnReposoVelocidad_3000.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.desplegarArmas()
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("Â¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
		assert.that(naveEnAtaque.tieneArmasDesplegadas())
	}
}

describe "propulsion naves" {
  test "nave de carga tiene 20000 de velocidad" {
	const naveSinVelocidad = new NaveDeCarga()
	naveSinVelocidad.propulsar()
	assert.equals(20000, naveSinVelocidad.velocidad())
  }

  test "nave pasajeros queda en 300000 de velocidad" {
	const naveSinPasajeros = new NaveDePasajeros(velocidad = 290000)
	naveSinPasajeros.propulsar()
	assert.equals(300000, naveSinPasajeros.velocidad())

  }
}

describe "nave residuos radiactivos" {
	const naveResiduosSellado = new NaveCargaResiduosRadiactivos(velocidad=20000, carga = 3000, selladoAlVacio = true)
	const naveResiduosNoSellado = new NaveCargaResiduosRadiactivos(velocidad=20000, carga = 3000)
  test "recive amenaza sellado" {
	naveResiduosSellado.recibirAmenaza()
	assert.equals(0, naveResiduosSellado.velocidad())
	assert.equals(3000, naveResiduosSellado.carga())
  }

  test "recive amenaza no sellad" {
	naveResiduosNoSellado.recibirAmenaza()
	assert.equals(20000, naveResiduosNoSellado.velocidad())
	assert.equals(0, naveResiduosNoSellado.carga())
  }
}

